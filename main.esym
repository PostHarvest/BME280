D G "__PCH__" 0 225 ""5.025""
D G "__DEVICE__" 0 225 "248"
D G "__DATE__" 0 225 ""15-Thg10-17""
D G "__TIME__" 0 225 ""14:48:49"" "EX_CAN.C                             ////"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 40 "int8" `54 
f B "set_tris_a" 1 40 "void(int8 value)" `53 
v L "value" 1 41 "int8" `56 
f B "set_tris_b" 1 41 "void(int8 value)" `55 
v L "value" 1 42 "int8" `58 
f B "set_tris_c" 1 42 "void(int8 value)" `57 
f B "get_tris_a" 1 43 "int8()" `59 
f B "get_tris_b" 1 44 "int8()" `60 
f B "get_tris_c" 1 45 "int8()" `61 
v L "value" 1 46 "int8" `63 
f B "output_a" 1 46 "void(int8 value)" `62 
v L "value" 1 47 "int8" `65 
f B "output_b" 1 47 "void(int8 value)" `64 
v L "value" 1 48 "int8" `67 
f B "output_c" 1 48 "void(int8 value)" `66 
f B "input_a" 1 49 "int8()" `68 
f B "input_b" 1 50 "int8()" `69 
f B "input_c" 1 51 "int8()" `70 
f B "input_change_a" 1 52 "int8()" `71 
f B "input_change_b" 1 53 "int8()" `72 
f B "input_change_c" 1 54 "int8()" `73 
v L "pin" 1 55 "int16" `75 
f B "input" 1 55 "int8(int16 pin)" `74 
v L "pin" 1 56 "int16" `77 
f B "input_state" 1 56 "int8(int16 pin)" `76 
v L "pin" 1 57 "int16" `79 
f B "output_low" 1 57 "void(int16 pin)" `78 
v L "pin" 1 58 "int16" `81 
f B "output_high" 1 58 "void(int16 pin)" `80 
v L "pin" 1 59 "int16" `83 
f B "output_toggle" 1 59 "void(int16 pin)" `82 
v L "pin" 1 60 "int16" `85 
v L "level" 1 60 "int8" `86 
f B "output_bit" 1 60 "void(int16 pin,int8 level)" `84 
v L "pin" 1 61 "int16" `88 
f B "output_float" 1 61 "void(int16 pin)" `87 
v L "pin" 1 62 "int16" `90 
f B "output_drive" 1 62 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 66 "31744"
d G "PIN_A1" 1 67 "31745"
d G "PIN_A2" 1 68 "31746"
d G "PIN_A3" 1 69 "31747"
d G "PIN_A4" 1 70 "31748"
d G "PIN_A5" 1 71 "31749"
d G "PIN_A6" 1 72 "31750"
d G "PIN_B0" 1 74 "31752"
d G "PIN_B1" 1 75 "31753"
d G "PIN_B2" 1 76 "31754"
d G "PIN_B3" 1 77 "31755"
d G "PIN_B4" 1 78 "31756"
d G "PIN_B5" 1 79 "31757"
d G "PIN_B6" 1 80 "31758"
d G "PIN_B7" 1 81 "31759"
d G "PIN_C0" 1 83 "31760"
d G "PIN_C1" 1 84 "31761"
d G "PIN_C2" 1 85 "31762"
d G "PIN_C3" 1 86 "31763"
d G "PIN_C4" 1 87 "31764"
d G "PIN_C5" 1 88 "31765"
d G "PIN_C6" 1 89 "31766"
d G "PIN_C7" 1 90 "31767"
d G "FALSE" 1 93 "0"
d G "TRUE" 1 94 "1"
d G "BYTE" 1 96 "int8"
d G "BOOLEAN" 1 97 "int1"
d G "getc" 1 99 "getch"
d G "fgetc" 1 100 "getch"
d G "getchar" 1 101 "getch"
d G "putc" 1 102 "putchar"
d G "fputc" 1 103 "putchar"
d G "fgets" 1 104 "gets"
d G "fputs" 1 105 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 110 "int8()" `91 
f B "reset_cpu" 1 111 "void()" `92 
f B "sleep" 1 112 "void()" `93  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 114 "7"
d G "MCLR_FROM_SLEEP" 1 115 "11"
d G "MCLR_FROM_RUN" 1 116 "15"
d G "NORMAL_POWER_UP" 1 117 "12"
d G "BROWNOUT_RESTART" 1 118 "14"
d G "WDT_FROM_SLEEP" 1 119 "3"
d G "RESET_INSTRUCTION" 1 120 "0"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 127 "int8" `95 
f B "setup_timer_0" 1 127 "void(int8 mode)" `94 
v L "value" 1 128 "int16" `97 
f B "set_timer0" 1 128 "void(int16 value)" `96 
f B "get_timer0" 1 129 "int16()" `98 
v L "mode" 1 130 "int8" `100 
v L "prescaler" 1 130 "int8" `101 
f B "setup_counters" 1 130 "void(int8 mode,int8 prescaler)" `99 
v L "value" 1 131 "int16" `103 
f B "set_rtcc" 1 131 "void(int16 value)" `102 
f B "get_rtcc" 1 132 "int16()" `104  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 134 "0"
d G "T0_EXT_L_TO_H" 1 135 "32"
d G "T0_EXT_H_TO_L" 1 136 "48"
d G "T0_DIV_1" 1 138 "8"
d G "T0_DIV_2" 1 139 "0"
d G "T0_DIV_4" 1 140 "1"
d G "T0_DIV_8" 1 141 "2"
d G "T0_DIV_16" 1 142 "3"
d G "T0_DIV_32" 1 143 "4"
d G "T0_DIV_64" 1 144 "5"
d G "T0_DIV_128" 1 145 "6"
d G "T0_DIV_256" 1 146 "7"
d G "T0_OFF" 1 148 "0x80"
d G "T0_8_BIT" 1 150 "0x40"
d G "RTCC_INTERNAL" 1 152 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 153 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 154 "48"
d G "RTCC_DIV_1" 1 155 "8"
d G "RTCC_DIV_2" 1 156 "0"
d G "RTCC_DIV_4" 1 157 "1"
d G "RTCC_DIV_8" 1 158 "2"
d G "RTCC_DIV_16" 1 159 "3"
d G "RTCC_DIV_32" 1 160 "4"
d G "RTCC_DIV_64" 1 161 "5"
d G "RTCC_DIV_128" 1 162 "6"
d G "RTCC_DIV_256" 1 163 "7"
d G "RTCC_OFF" 1 164 "0x80"
d G "RTCC_8_BIT" 1 165 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 176 "int16" `106 
f B "setup_wdt" 1 176 "void(int16 mode)" `105 
f B "restart_wdt" 1 177 "void()" `107  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 179 "0x100"
d G "WDT_OFF" 1 180 "0"
d G "WDT_18MS" 1 182 "0x300"
d G "WDT_36MS" 1 183 "0x500"
d G "WDT_72MS" 1 184 "0x700"
d G "WDT_144MS" 1 185 "0x900"
d G "WDT_288MS" 1 186 "0xB00"
d G "WDT_576MS" 1 187 "0xD00"
d G "WDT_1152MS" 1 188 "0xF00"
d G "WDT_2304MS" 1 189 "0x1108"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 195 "int16" `109 
f B "setup_timer_1" 1 195 "void(int16 mode)" `108 
f B "get_timer1" 1 196 "int16()" `110 
v L "value" 1 197 "int16" `112 
f B "set_timer1" 1 197 "void(int16 value)" `111  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 200 "0"
d G "T1_INTERNAL" 1 201 "0x85"
d G "T1_EXTERNAL" 1 202 "0x87"
d G "T1_EXTERNAL_SYNC" 1 203 "0x83"
d G "T1_CLK_OUT" 1 205 "8"
d G "T1_DIV_BY_1" 1 207 "0"
d G "T1_DIV_BY_2" 1 208 "0x10"
d G "T1_DIV_BY_4" 1 209 "0x20"
d G "T1_DIV_BY_8" 1 210 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 215 "int8" `114 
v L "period" 1 215 "int8" `115 
v L "postscale" 1 215 "int8" `116 
f B "setup_timer_2" 1 215 "void(int8 mode,int8 period,int8 postscale)" `113 
f B "get_timer2" 1 216 "int8()" `117 
v L "value" 1 217 "int8" `119 
f B "set_timer2" 1 217 "void(int8 value)" `118  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 219 "0"
d G "T2_DIV_BY_1" 1 220 "4"
d G "T2_DIV_BY_4" 1 221 "5"
d G "T2_DIV_BY_16" 1 222 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 227 "int16" `121 
f B "setup_timer_3" 1 227 "void(int16 mode)" `120 
f B "get_timer3" 1 228 "int16()" `122 
v L "value" 1 229 "int16" `124 
f B "set_timer3" 1 229 "void(int16 value)" `123  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 232 "0"
d G "T3_INTERNAL" 1 233 "0x85"
d G "T3_EXTERNAL" 1 234 "0x87"
d G "T3_EXTERNAL_SYNC" 1 235 "0x83"
d G "T3_DIV_BY_1" 1 237 "0"
d G "T3_DIV_BY_2" 1 238 "0x10"
d G "T3_DIV_BY_4" 1 239 "0x20"
d G "T3_DIV_BY_8" 1 240 "0x30"
c L "set_timer3" 1 1 4 "FUNCTION"
v L "mode" 1 246 "int32" `126 
f B "setup_ccp1" 1 246 "void(int32 mode)" `125 
v L "mode" 1 247 "int32" `128 
v L "pwm" 1 247 "int8" `129 
f G "setup_ccp1" 1 247 "void(int32 mode,int8 pwm)" `127 
v L "value" 1 248 "int16" `131 
f B "set_pwm1_duty" 1 248 "void(int16 value)" `130  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 250 "0"
d G "CCP_CAPTURE_FE" 1 251 "0x04"
d G "CCP_CAPTURE_RE" 1 252 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 253 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 254 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 255 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 256 "0x09"
d G "CCP_COMPARE_INT" 1 257 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 258 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 259 "0x0B"
d G "CCP_PWM" 1 260 "0x0C"
d G "CCP_PWM_PLUS_1" 1 261 "0x1c"
d G "CCP_PWM_PLUS_2" 1 262 "0x2c"
d G "CCP_PWM_PLUS_3" 1 263 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 270 "0x48"
d G "T3_CCP2" 1 271 "0x8"
c L "set_pwm1_duty" 1 1 3 "FUNCTION"
v L "mode" 1 276 "int32" `136 
f B "setup_spi" 1 276 "void(int32 mode)" `135 
v L "value" 1 277 "int8" `138 
f B "spi_write" 1 277 "void(int8 value)" `137 
f B "spi_read" 1 278 "int8()" `139 
v L "value" 1 279 "int8" `141 
f G "spi_read" 1 279 "int8(int8 value)" `140 
f B "spi_data_in" 1 280 "int8()" `142 
v L "mode" 1 281 "int32" `144 
f B "setup_spi2" 1 281 "void(int32 mode)" `143 
v L "value" 1 282 "int8" `146 
f B "spi_write2" 1 282 "void(int8 value)" `145 
f B "spi_read2" 1 283 "int8()" `147 
v L "value" 1 284 "int8" `149 
f G "spi_read2" 1 284 "int8(int8 value)" `148 
f B "spi_data_in2" 1 285 "int8()" `150  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 287 "0x00"
d G "SPI_MASTER" 1 288 "0x20"
d G "SPI_SLAVE" 1 289 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 290 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 291 "0x00"
d G "SPI_CLK_DIV_4" 1 292 "0x00"
d G "SPI_CLK_DIV_16" 1 293 "0x01"
d G "SPI_CLK_DIV_64" 1 294 "0x02"
d G "SPI_CLK_T2" 1 295 "0x03"
d G "SPI_SS_DISABLED" 1 296 "0x01"
d G "SPI_XMIT_L_TO_H" 1 298 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 299 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 301 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 302 "0x8000"
d G "SPI_L_TO_H" 1 305 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 306 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 1 2 "FUNCTION"
v L "baud" 1 310 "int32" `152 
f B "setup_uart" 1 310 "void(int32 baud)" `151 
v L "baud" 1 311 "int32" `154 
v L "stream" 1 311 "int8" `155 
f G "setup_uart" 1 311 "void(int32 baud,int8 stream)" `153 
v L "baud" 1 312 "int32" `157 
v L "stream" 1 312 "int8" `158 
v L "clock" 1 312 "int32" `159 
f G "setup_uart" 1 312 "void(int32 baud,int8 stream,int32 clock)" `156 
v L "baud" 1 313 "int32" `161 
f B "set_uart_speed" 1 313 "void(int32 baud)" `160 
v L "baud" 1 314 "int32" `163 
v L "stream" 1 314 "int8" `164 
f G "set_uart_speed" 1 314 "void(int32 baud,int8 stream)" `162 
v L "baud" 1 315 "int32" `166 
v L "stream" 1 315 "int8" `167 
v L "clock" 1 315 "int32" `168 
f G "set_uart_speed" 1 315 "void(int32 baud,int8 stream,int32 clock)" `165  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 319 "2"
d G "UART_DATA" 1 320 "4"
c L "set_uart_speed" 1 1 2 "FUNCTION"
v L "mode" 1 323 "int8" `170 
f B "setup_low_volt_detect" 1 323 "void(int8 mode)" `169  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 325 "0x1F"
d G "LVD_45" 1 326 "0x1E"
d G "LVD_42" 1 327 "0x1D"
d G "LVD_40" 1 328 "0x1C"
d G "LVD_38" 1 329 "0x1B"
d G "LVD_36" 1 330 "0x1A"
d G "LVD_35" 1 331 "0x19"
d G "LVD_33" 1 332 "0x18"
d G "LVD_30" 1 333 "0x17"
d G "LVD_28" 1 334 "0x16"
d G "LVD_27" 1 335 "0x15"
d G "LVD_25" 1 336 "0x14"
d G "LVD_23" 1 337 "0x13"
d G "LVD_21" 1 338 "0x12"
d G "LVD_19" 1 339 "0x11"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 344 "int8" `172 
f B "setup_oscillator" 1 344 "void(int8 mode)" `171  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 1 346 "1"
d G "OSC_NORMAL" 1 347 "0"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 354 "int32" `174 
f B "setup_adc" 1 354 "void(int32 mode)" `173 
f B "read_adc" 1 355 "int8()" `175 
v L "mode" 1 356 "int8" `177 
f G "read_adc" 1 356 "int8(int8 mode)" `176 
f G "read_adc" 1 357 "int16()" `178 
v L "mode" 1 358 "int8" `180 
f G "read_adc" 1 358 "int16(int8 mode)" `179 
f B "adc_done" 1 359 "int8()" `181  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 361 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 362 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 363 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 364 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 365 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 366 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 367 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 368 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "setting" 1 371 "int8" `183 
f B "setup_adc_ports" 1 371 "void(int8 setting)" `182 
v L "channel" 1 372 "int8" `185 
f B "set_adc_channel" 1 372 "void(int8 channel)" `184  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 374 "7" "None"
d G "ALL_ANALOG" 1 375 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 376 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 377 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 378 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 379 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 380 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 381 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 382 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 383 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 384 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 385 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 386 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 387 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 388 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 389 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 392 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 393 "1"
d G "ADC_READ_ONLY" 1 394 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 400 "sint8" `187 
f B "abs" 1 400 "sint8(sint8 x)" `186 
v L "x" 1 401 "sint16" `189 
f G "abs" 1 401 "sint16(sint16 x)" `188 
v L "x" 1 402 "sint32" `191 
f G "abs" 1 402 "sint32(sint32 x)" `190 
v L "x" 1 403 "float" `193 
f G "abs" 1 403 "float(float x)" `192 
v L "??65535" 1 404 "int8" `195 
v L "??65535" 1 404 "int8" `196 
f B "_mul" 1 404 "int16(int8 ,int8 )" `194 
v L "??65535" 1 405 "sint8" `195 
v L "??65535" 1 405 "sint8" `199 
f G "_mul" 1 405 "sint16(sint8 ,sint8 )" `197 
v L "??65535" 1 406 "int16" `195 
v L "??65535" 1 406 "int16" `202 
f G "_mul" 1 406 "int32(int16 ,int16 )" `200 
v L "??65535" 1 407 "sint16" `195 
v L "??65535" 1 407 "sint16" `205 
f G "_mul" 1 407 "sint32(sint16 ,sint16 )" `203  "Memory Manipulation Prototypes:"
v L "bank" 1 410 "int8" `207 
v L "offset" 1 410 "int8" `208 
f B "read_bank" 1 410 "int8(int8 bank,int8 offset)" `206 
v L "bank" 1 411 "int8" `210 
v L "offset" 1 411 "int8" `211 
v L "value" 1 411 "int8" `212 
f B "write_bank" 1 411 "void(int8 bank,int8 offset,int8 value)" `209 
v L "dest" 1 412 "*int8" `214 
v L "src" 1 412 "*int8" `215 
f B "strcpy" 1 412 "void(*int8 dest,*int8 src)" `213 
v L "dest" 1 413 "*int8" `217 
v L "src" 1 413 "*int8" `218 
f B "strcopy" 1 413 "void(*int8 dest,*int8 src)" `216 
v L "destination" 1 414 "*int8" `220 
v L "value" 1 414 "int8" `221 
v L "num" 1 414 "int16" `222 
f B "memset" 1 414 "void(*int8 destination,int8 value,int16 num)" `219 
v L "destination" 1 415 "*int8" `224 
v L "source" 1 415 "*int8" `225 
v L "num" 1 415 "int16" `226 
f B "memcpy" 1 415 "void(*int8 destination,*int8 source,int16 num)" `223  "String Prototypes:"
v L "cvalue" 1 418 "int8" `228 
f B "toupper" 1 418 "int8(int8 cvalue)" `227 
v L "cvalue" 1 419 "int8" `230 
f B "tolower" 1 419 "int8(int8 cvalue)" `229 
v L "string" 1 420 "*int8" `232 
v L "cstring" 1 420 "*int8" `233 
f B "sprintf" 1 420 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `231  "Data Manipulators Prototypes:"
v L "address" 1 423 "*int8" `236 
v L "bytes" 1 423 "int8" `237 
v L "value" 1 423 "int8" `238 
f B "shift_left" 1 423 "int8(*int8 address,int8 bytes,int8 value)" `235 
v L "address" 1 424 "*int8" `240 
v L "bytes" 1 424 "int8" `241 
v L "value" 1 424 "int8" `242 
f B "shift_right" 1 424 "int8(*int8 address,int8 bytes,int8 value)" `239 
v L "address" 1 425 "*int8" `244 
v L "bytes" 1 425 "int8" `245 
f B "rotate_left" 1 425 "void(*int8 address,int8 bytes)" `243 
v L "address" 1 426 "*int8" `247 
v L "bytes" 1 426 "int8" `248 
f B "rotate_right" 1 426 "void(*int8 address,int8 bytes)" `246 
v L "value" 1 427 "int8" `250 
f B "swap" 1 427 "void(int8 value)" `249 
v L "var" 1 428 "int16" `252 
v L "offset" 1 428 "int8" `253 
f B "make8" 1 428 "int8(int16 var,int8 offset)" `251 
v L "var" 1 429 "int32" `252 
v L "offset" 1 429 "int8" `256 
f G "make8" 1 429 "int8(int32 var,int8 offset)" `254 
v L "varhigh" 1 430 "int8" `258 
v L "varlow" 1 430 "int8" `259 
f B "make16" 1 430 "int16(int8 varhigh,int8 varlow)" `257 
v L "var1" 1 431 "int16" `261 
f B "make32" 1 431 "int32(int16 var1)" `260 
v L "var1" 1 432 "int16" `263 
v L "var2" 1 432 "int16" `264 
f G "make32" 1 432 "int32(int16 var1,int16 var2)" `262 
v L "var1" 1 433 "int16" `263 
v L "var2" 1 433 "int8" `267 
f G "make32" 1 433 "int32(int16 var1,int8 var2)" `265 
v L "var1" 1 434 "int16" `269 
v L "var2" 1 434 "int8" `270 
v L "var3" 1 434 "int8" `271 
f G "make32" 1 434 "int32(int16 var1,int8 var2,int8 var3)" `268 
v L "var1" 1 435 "int8" `273 
f G "make32" 1 435 "int32(int8 var1)" `272 
v L "var1" 1 436 "int8" `263 
v L "var2" 1 436 "int8" `276 
f G "make32" 1 436 "int32(int8 var1,int8 var2)" `274 
v L "var1" 1 437 "int8" `269 
v L "var2" 1 437 "int8" `270 
v L "var3" 1 437 "int8" `280 
f G "make32" 1 437 "int32(int8 var1,int8 var2,int8 var3)" `277 
v L "var1" 1 438 "int8" `282 
v L "var2" 1 438 "int8" `283 
v L "var3" 1 438 "int8" `284 
v L "var4" 1 438 "int8" `285 
f G "make32" 1 438 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `281 
v L "var1" 1 439 "int8" `263 
v L "var2" 1 439 "int16" `288 
f G "make32" 1 439 "int32(int8 var1,int16 var2)" `286 
v L "var1" 1 440 "int8" `269 
v L "var2" 1 440 "int16" `270 
v L "var3" 1 440 "int8" `292 
f G "make32" 1 440 "int32(int8 var1,int16 var2,int8 var3)" `289 
v L "var1" 1 441 "int8" `269 
v L "var2" 1 441 "int8" `270 
v L "var3" 1 441 "int16" `296 
f G "make32" 1 441 "int32(int8 var1,int8 var2,int16 var3)" `293 
v L "var" 1 442 "int8" `298 
v L "bit" 1 442 "int8" `299 
f B "bit_set" 1 442 "void(int8 var,int8 bit)" `297 
v L "var" 1 443 "int16" `298 
v L "bit" 1 443 "int8" `302 
f G "bit_set" 1 443 "void(int16 var,int8 bit)" `300 
v L "var" 1 444 "int32" `298 
v L "bit" 1 444 "int8" `305 
f G "bit_set" 1 444 "void(int32 var,int8 bit)" `303 
v L "var" 1 445 "int8" `307 
v L "bit" 1 445 "int8" `308 
f B "bit_clear" 1 445 "void(int8 var,int8 bit)" `306 
v L "var" 1 446 "int16" `307 
v L "bit" 1 446 "int8" `311 
f G "bit_clear" 1 446 "void(int16 var,int8 bit)" `309 
v L "var" 1 447 "int32" `307 
v L "bit" 1 447 "int8" `314 
f G "bit_clear" 1 447 "void(int32 var,int8 bit)" `312 
v L "var" 1 448 "int8" `316 
v L "bit" 1 448 "int8" `317 
f B "bit_test" 1 448 "int8(int8 var,int8 bit)" `315 
v L "var" 1 449 "int16" `316 
v L "bit" 1 449 "int8" `320 
f G "bit_test" 1 449 "int8(int16 var,int8 bit)" `318 
v L "var" 1 450 "int32" `316 
v L "bit" 1 450 "int8" `323 
f G "bit_test" 1 450 "int8(int32 var,int8 bit)" `321  "#use delay() Prototypes:"
v L "count" 1 453 "int8" `325 
f B "delay_cycles" 1 453 "void(int8 count)" `324 
v L "time" 1 454 "int16" `327 
f B "delay_ms" 1 454 "void(int16 time)" `326 
v L "time" 1 455 "int16" `329 
f B "delay_us" 1 455 "void(int16 time)" `328  "#use rs232() Prototypes:"
v L "cdata" 1 458 "int8" `331 
f B "putchar" 1 458 "void(int8 cdata)" `330 
v L "cdata" 1 459 "int8" `333 
v L "stream" 1 459 "int8" `334 
f G "putchar" 1 459 "void(int8 cdata,int8 stream)" `332 
v L "string" 1 460 "*int8" `336 
f B "puts" 1 460 "void(*int8 string)" `335 
v L "string" 1 461 "*int8" `338 
v L "stream" 1 461 "int8" `339 
f G "puts" 1 461 "void(*int8 string,int8 stream)" `337 
f B "getch" 1 462 "int8()" `340 
v L "stream" 1 463 "int8" `342 
f G "getch" 1 463 "int8(int8 stream)" `341 
v L "string" 1 464 "*int8" `344 
f B "gets" 1 464 "void(*int8 string)" `343 
v L "string" 1 465 "*int8" `346 
v L "stream" 1 465 "int8" `347 
f G "gets" 1 465 "void(*int8 string,int8 stream)" `345 
f B "kbhit" 1 466 "int8()" `348 
v L "stream" 1 467 "int8" `350 
f G "kbhit" 1 467 "int8(int8 stream)" `349 
v L "string" 1 468 "*int8" `352 
f B "printf" 1 468 "void(*int8 string,*int8 _VA_LIST)" `351 
v L "stream" 1 469 "int8" `355 
v L "string" 1 469 "*int8" `356 
f B "fprintf" 1 469 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `354 
f B "putc_send" 1 470 "void()" `358 
v L "stream" 1 471 "int8" `360 
f B "fputc_send" 1 471 "void(int8 stream)" `359 
f B "rcv_buffer_full" 1 472 "int8()" `361 
v L "stream" 1 473 "int8" `363 
f G "rcv_buffer_full" 1 473 "int8(int8 stream)" `362 
f B "rcv_buffer_bytes" 1 474 "int16()" `364 
v L "stream" 1 475 "int8" `366 
f G "rcv_buffer_bytes" 1 475 "int16(int8 stream)" `365 
f B "tx_buffer_full" 1 476 "int8()" `367 
v L "stream" 1 477 "int8" `369 
f G "tx_buffer_full" 1 477 "int8(int8 stream)" `368 
f B "tx_buffer_bytes" 1 478 "int16()" `370 
v L "stream" 1 479 "int8" `372 
f G "tx_buffer_bytes" 1 479 "int16(int8 stream)" `371  "#use i2c() Prototypes:"
f B "i2c_read" 1 482 "int8()" `373 
v L "stream" 1 483 "int8" `375 
f G "i2c_read" 1 483 "int8(int8 stream)" `374 
v L "stream" 1 484 "int8" `377 
v L "ack" 1 484 "int8" `378 
f G "i2c_read" 1 484 "int8(int8 stream,int8 ack)" `376 
v L "data" 1 485 "int8" `380 
f B "i2c_write" 1 485 "int8(int8 data)" `379 
v L "stream" 1 486 "int8" `382 
v L "data" 1 486 "int8" `383 
f G "i2c_write" 1 486 "int8(int8 stream,int8 data)" `381 
f B "i2c_start" 1 487 "void()" `384 
v L "stream" 1 488 "int8" `386 
f G "i2c_start" 1 488 "void(int8 stream)" `385 
v L "stream" 1 489 "int8" `388 
v L "restart" 1 489 "int8" `389 
f G "i2c_start" 1 489 "void(int8 stream,int8 restart)" `387 
f B "i2c_stop" 1 490 "void()" `390 
v L "stream" 1 491 "int8" `392 
f G "i2c_stop" 1 491 "void(int8 stream)" `391 
f B "i2c_isr_state" 1 492 "int8()" `393 
v L "addr" 1 493 "int8" `395 
f B "i2c_slaveaddr" 1 493 "void(int8 addr)" `394 
v L "stream" 1 494 "int8" `397 
v L "addr" 1 494 "int8" `398 
f G "i2c_slaveaddr" 1 494 "void(int8 stream,int8 addr)" `396 
f B "i2c_poll" 1 495 "int8()" `399 
v L "stream" 1 496 "int8" `401 
f G "i2c_poll" 1 496 "int8(int8 stream)" `400 
v L "baud" 1 497 "int32" `403 
f B "i2c_init" 1 497 "void(int32 baud)" `402 
v L "stream" 1 498 "int8" `405 
v L "baud" 1 498 "int32" `406 
f G "i2c_init" 1 498 "void(int8 stream,int32 baud)" `404  "#use spi() Prototypes:"
f B "spi_xfer" 1 501 "int8()" `407 
f G "spi_xfer" 1 502 "int16()" `408 
f G "spi_xfer" 1 503 "int32()" `409 
v L "data" 1 504 "int8" `411 
f G "spi_xfer" 1 504 "int8(int8 data)" `410 
v L "data" 1 505 "int16" `413 
f G "spi_xfer" 1 505 "int16(int16 data)" `412 
v L "data" 1 506 "int32" `415 
f G "spi_xfer" 1 506 "int32(int32 data)" `414 
v L "stream" 1 507 "int8" `417 
v L "data" 1 507 "int8" `418 
f G "spi_xfer" 1 507 "int8(int8 stream,int8 data)" `416 
v L "stream" 1 508 "int8" `417 
v L "data" 1 508 "int16" `421 
f G "spi_xfer" 1 508 "int16(int8 stream,int16 data)" `419 
v L "stream" 1 509 "int8" `417 
v L "data" 1 509 "int32" `424 
f G "spi_xfer" 1 509 "int32(int8 stream,int32 data)" `422 
v L "stream" 1 510 "int8" `426 
v L "data" 1 510 "int8" `427 
v L "bits" 1 510 "int8" `428 
f G "spi_xfer" 1 510 "int8(int8 stream,int8 data,int8 bits)" `425 
v L "stream" 1 511 "int8" `426 
v L "data" 1 511 "int16" `427 
v L "bits" 1 511 "int8" `432 
f G "spi_xfer" 1 511 "int16(int8 stream,int16 data,int8 bits)" `429 
v L "stream" 1 512 "int8" `426 
v L "data" 1 512 "int32" `427 
v L "bits" 1 512 "int8" `436 
f G "spi_xfer" 1 512 "int32(int8 stream,int32 data,int8 bits)" `433 
v L "baud" 1 513 "int32" `438 
f B "spi_init" 1 513 "void(int32 baud)" `437 
v L "stream" 1 514 "int8" `440 
v L "baud" 1 514 "int32" `441 
f G "spi_init" 1 514 "void(int8 stream,int32 baud)" `439 
v L "baud" 1 515 "int32" `443 
f B "spi_speed" 1 515 "void(int32 baud)" `442 
v L "stream" 1 516 "int8" `445 
v L "baud" 1 516 "int32" `446 
f G "spi_speed" 1 516 "void(int8 stream,int32 baud)" `444 
v L "stream" 1 517 "int8" `448 
v L "baud" 1 517 "int32" `449 
v L "clock" 1 517 "int32" `450 
f G "spi_speed" 1 517 "void(int8 stream,int32 baud,int32 clock)" `447 
v L "data" 1 518 "int8" `452 
f B "spi_prewrite" 1 518 "void(int8 data)" `451 
v L "data" 1 519 "int16" `454 
f G "spi_prewrite" 1 519 "void(int16 data)" `453 
v L "data" 1 520 "int32" `456 
f G "spi_prewrite" 1 520 "void(int32 data)" `455 
v L "??65535" 1 521 "int8" `458 
v L "data" 1 521 "int8" `459 
f G "spi_prewrite" 1 521 "void(int8 ,int8 data)" `457 
v L "??65535" 1 522 "int8" `458 
v L "data" 1 522 "int16" `462 
f G "spi_prewrite" 1 522 "void(int8 ,int16 data)" `460 
v L "??65535" 1 523 "int8" `458 
v L "data" 1 523 "int32" `465 
f G "spi_prewrite" 1 523 "void(int8 ,int32 data)" `463 
f B "spi_xfer_in" 1 524 "int8()" `466 
f G "spi_xfer_in" 1 525 "int16()" `467 
f G "spi_xfer_in" 1 526 "int32()" `468 
v L "bits" 1 527 "int8" `470 
f G "spi_xfer_in" 1 527 "int8(int8 bits)" `469 
v L "bits" 1 528 "int8" `472 
f G "spi_xfer_in" 1 528 "int16(int8 bits)" `471 
v L "bits" 1 529 "int8" `474 
f G "spi_xfer_in" 1 529 "int32(int8 bits)" `473 
v L "stream" 1 530 "int8" `476 
v L "bits" 1 530 "int8" `477 
f G "spi_xfer_in" 1 530 "int8(int8 stream,int8 bits)" `475 
v L "stream" 1 531 "int8" `476 
v L "bits" 1 531 "int8" `480 
f G "spi_xfer_in" 1 531 "int16(int8 stream,int8 bits)" `478 
v L "stream" 1 532 "int8" `476 
v L "bits" 1 532 "int8" `483 
f G "spi_xfer_in" 1 532 "int32(int8 stream,int8 bits)" `481  "#use rtos() Prototypes:"
f B "rtos_run" 1 535 "void()" `484 
f B "rtos_yield" 1 536 "void()" `485 
v L "task" 1 537 "int8" `487 
f B "rtos_enable" 1 537 "void(int8 task)" `486 
v L "task" 1 538 "int8" `489 
f B "rtos_disable" 1 538 "void(int8 task)" `488 
f B "rtos_terminate" 1 539 "void()" `490 
v L "flag" 1 540 "int8" `492 
f B "rtos_await" 1 540 "void(int8 flag)" `491 
v L "sem" 1 541 "int8" `494 
f B "rtos_wait" 1 541 "void(int8 sem)" `493 
v L "sem" 1 542 "int8" `496 
f B "rtos_signal" 1 542 "void(int8 sem)" `495 
v L "task" 1 543 "int8" `498 
v L "msg" 1 543 "int8" `499 
f B "rtos_msg_send" 1 543 "void(int8 task,int8 msg)" `497 
f B "rtos_msg_read" 1 544 "int8()" `500 
f B "rtos_msg_poll" 1 545 "int8()" `501 
v L "task" 1 546 "int8" `503 
f B "rtos_overrun" 1 546 "int8(int8 task)" `502 
v L "task" 1 547 "int8" `505 
v L "stat" 1 547 "*int8" `506 
f B "rtos_stats" 1 547 "void(int8 task,*int8 stat)" `504  "#use timer() Prototypes:"
f B "get_ticks" 1 550 "int8()" `507 
f G "get_ticks" 1 551 "int16()" `508 
f G "get_ticks" 1 552 "int32()" `509 
v L "stream" 1 553 "int8" `511 
f G "get_ticks" 1 553 "int8(int8 stream)" `510 
v L "stream" 1 554 "int8" `513 
f G "get_ticks" 1 554 "int16(int8 stream)" `512 
v L "stream" 1 555 "int8" `515 
f G "get_ticks" 1 555 "int32(int8 stream)" `514 
v L "value" 1 556 "int8" `517 
f B "set_ticks" 1 556 "void(int8 value)" `516 
v L "value" 1 557 "int16" `519 
f G "set_ticks" 1 557 "void(int16 value)" `518 
v L "value" 1 558 "int32" `521 
f G "set_ticks" 1 558 "void(int32 value)" `520 
v L "stream" 1 559 "int8" `523 
v L "value" 1 559 "int8" `524 
f G "set_ticks" 1 559 "void(int8 stream,int8 value)" `522 
v L "stream" 1 560 "int8" `523 
v L "value" 1 560 "int16" `527 
f G "set_ticks" 1 560 "void(int8 stream,int16 value)" `525 
v L "stream" 1 561 "int8" `523 
v L "value" 1 561 "int32" `530 
f G "set_ticks" 1 561 "void(int8 stream,int32 value)" `528  "#use pwm() Prototypes:"
f B "pwm_on" 1 564 "void()" `531 
v L "stream" 1 565 "int8" `533 
f G "pwm_on" 1 565 "void(int8 stream)" `532 
f B "pwm_off" 1 566 "void()" `534 
v L "stream" 1 567 "int8" `536 
f G "pwm_off" 1 567 "void(int8 stream)" `535 
v L "duty" 1 568 "int16" `538 
f B "pwm_set_duty" 1 568 "void(int16 duty)" `537 
v L "stream" 1 569 "int8" `540 
v L "duty" 1 569 "int16" `541 
f G "pwm_set_duty" 1 569 "void(int8 stream,int16 duty)" `539 
v L "percent" 1 570 "int16" `543 
f B "pwm_set_duty_percent" 1 570 "void(int16 percent)" `542 
v L "stream" 1 571 "int8" `545 
v L "percent" 1 571 "int16" `546 
f G "pwm_set_duty_percent" 1 571 "void(int8 stream,int16 percent)" `544 
v L "frequency" 1 572 "int32" `548 
f B "pwm_set_frequency" 1 572 "void(int32 frequency)" `547 
v L "stream" 1 573 "int8" `550 
v L "frequency" 1 573 "int32" `551 
f G "pwm_set_frequency" 1 573 "void(int8 stream,int32 frequency)" `549  "#use capture() Prototypes:"
f B "get_capture_time" 1 576 "int16()" `552 
v L "stream" 1 577 "int8" `554 
f G "get_capture_time" 1 577 "int16(int8 stream)" `553 
f B "get_capture_event" 1 578 "int8()" `555 
v L "stream" 1 579 "int8" `557 
f G "get_capture_event" 1 579 "int8(int8 stream)" `556  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 592 "int16" `559 
f B "goto_address" 1 592 "void(int16 address)" `558 
v L "label" 1 593 "int16" `561 
f B "label_address" 1 593 "int16(int16 label)" `560  "Program Memory Prototypes:"
v L "address" 1 596 "int16" `563 
v L "dataptr" 1 596 "*int8" `564 
v L "count" 1 596 "int16" `565 
f B "read_program_memory" 1 596 "void(int16 address,*int8 dataptr,int16 count)" `562 
v L "address" 1 597 "int16" `567 
f B "read_program_eeprom" 1 597 "int16(int16 address)" `566 
v L "address" 1 598 "int16" `569 
f B "erase_program_eeprom" 1 598 "void(int16 address)" `568 
v L "address" 1 599 "int16" `571 
v L "dataptr" 1 599 "*int8" `572 
v L "count" 1 599 "int16" `573 
f B "write_program_memory" 1 599 "void(int16 address,*int8 dataptr,int16 count)" `570 
v L "address" 1 600 "int16" `575 
v L "data" 1 600 "int16" `576 
f B "write_program_eeprom" 1 600 "void(int16 address,int16 data)" `574  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 605 "int16" `577 
v L "address" 1 610 "__EEADDRESS__" `579 
f B "read_eeprom" 1 610 "int8(__EEADDRESS__ address)" `578 
v L "address" 1 611 "__EEADDRESS__" `581 
v L "value" 1 611 "int8" `582 
f B "write_eeprom" 1 611 "void(__EEADDRESS__ address,int8 value)" `580  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 618 "int32" `584 
f B "enable_interrupts" 1 618 "void(int32 interrupt)" `583 
v L "interrupt" 1 619 "int32" `586 
f B "disable_interrupts" 1 619 "void(int32 interrupt)" `585 
v L "interrupt" 1 620 "int32" `588 
f B "clear_interrupt" 1 620 "void(int32 interrupt)" `587 
v L "interrupt" 1 621 "int32" `590 
f B "interrupt_active" 1 621 "int8(int32 interrupt)" `589 
v L "interrupt" 1 622 "int32" `592 
f B "interrupt_enabled" 1 622 "int8(int32 interrupt)" `591 
v L "source" 1 623 "int8" `594 
v L "edge" 1 623 "int8" `595 
f B "ext_int_edge" 1 623 "void(int8 source,int8 edge)" `593 
v L "address" 1 624 "int16" `597 
f B "jump_to_isr" 1 624 "void(int16 address)" `596  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 626 "0x40"
d G "H_TO_L" 1 627 "0"
d G "GLOBAL" 1 629 "0xF2C0"
d G "PERIPH" 1 630 "0xF240"
d G "INT_RTCC" 1 631 "0x00F220"
d G "INT_TIMER0" 1 632 "0x00F220"
d G "INT_TIMER1" 1 633 "0x009D01"
d G "INT_TIMER2" 1 634 "0x009D02"
d G "INT_TIMER3" 1 635 "0x00A002"
d G "INT_EXT_L2H" 1 636 "0x5000F210"
d G "INT_EXT_H2L" 1 637 "0x6000F210"
d G "INT_EXT" 1 638 "0x00F210"
d G "INT_EXT1_L2H" 1 639 "0x5001F008"
d G "INT_EXT1_H2L" 1 640 "0x6001F008"
d G "INT_EXT1" 1 641 "0x00F008"
d G "INT_EXT2_L2H" 1 642 "0x5002F010"
d G "INT_EXT2_H2L" 1 643 "0x6002F010"
d G "INT_EXT2" 1 644 "0x00F010"
d G "INT_RB" 1 645 "0x00FFF208"
d G "INT_AD" 1 646 "0x009D40"
d G "INT_RDA" 1 647 "0x009D20"
d G "INT_TBE" 1 648 "0x009D10"
d G "INT_SSP" 1 649 "0x009D08"
d G "INT_CCP1" 1 650 "0x009D04"
d G "INT_BUSCOL" 1 651 "0x00A008"
d G "INT_LOWVOLT" 1 652 "0x00A004"
d G "INT_CANIRX" 1 653 "0x00A380"
d G "INT_CANWAKE" 1 654 "0x00A340"
d G "INT_CANERR" 1 655 "0x00A320"
d G "INT_EEPROM" 1 656 "0x00A010"
d G "INT_CANTX2" 1 657 "0x00A310"
d G "INT_CANTX1" 1 658 "0x00A308"
d G "INT_CANTX0" 1 659 "0x00A304"
d G "INT_CANRX1" 1 660 "0x00A302"
d G "INT_CANRX0" 1 661 "0x00A301"
C L "jump_to_isr" 2 2 60 "FUNCTION"
D G "__CCS_CAN18xxx8_LIB_DEFINES__" 3 20 ""
D G "CAN_DO_DEBUG" 3 23 "FALSE"
D G "CAN_USE_EXTENDED_ID" 3 27 "TRUE"
D G "CAN_BRG_SYNCH_JUMP_WIDTH" 3 31 "0" "synchronized jump width (def: 1 x Tq)"
D G "CAN_BRG_PRESCALAR" 3 35 "4" "baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc )"
D G "CAN_BRG_SEG_2_PHASE_TS" 3 39 "TRUE" "phase segment 2 time select bit (def: freely programmable)"
D G "CAN_BRG_SAM" 3 43 "0" "sample of the can bus line (def: bus line is sampled 1 times prior to sample point)"
D G "CAN_BRG_PHASE_SEGMENT_1" 3 47 "5" "phase segment 1 (def: 6 x Tq)"
D G "CAN_BRG_PROPAGATION_TIME" 3 51 "2" "propagation time select (def: 3 x Tq)"
D G "CAN_BRG_WAKE_FILTER" 3 55 "FALSE" "selects can bus line filter for wake up bit"
D G "CAN_BRG_PHASE_SEGMENT_2" 3 59 "5" "phase segment 2 time select (def: 6 x Tq)"
D G "CAN_USE_RX_DOUBLE_BUFFER" 3 63 "TRUE" "if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data"
D G "CAN_ENABLE_DRIVE_HIGH" 3 67 "0"
D G "CAN_ENABLE_CAN_CAPTURE" 3 71 "0"
D G "CAN_ENABLE_CANTX2" 3 75 "0" "0 CANTX2 disabled, 1 CANTX2 enabled"
D G "CAN_CANTX2_SOURCE" 3 79 "0" "0 source is invert of CANTX1, 1 source is CAN Clock"
E G "CAN_OP_CONFIG" 3 82 "4" `607 
E G "CAN_OP_LISTEN" 3 82 "3" `608 
E G "CAN_OP_LOOPBACK" 3 82 "2" `609 
E G "CAN_OP_DISABLE" 3 82 "1" `610 
E G "CAN_OP_NORMAL" 3 82 "0" `611 
E G "CAN_WIN_RX0" 3 83 "0" `613 
E G "CAN_WIN_RX1" 3 83 "5" `614 
E G "CAN_WIN_TX0" 3 83 "4" `615 
E G "CAN_WIN_TX1" 3 83 "3" `616 
E G "CAN_WIN_TX2" 3 83 "2" `617  "can control"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANCON" 3 91 "{int1 void0,int3 win,int1 abat,int3 reqop}" `623 
C L "jump_to_isr" 3 2 1 "FUNCTION"
E G "CAN_INT_WAKEUP" 3 95 "7" `625 
E G "CAN_INT_RX0" 3 95 "6" `626 
E G "CAN_INT_RX1" 3 95 "5" `627 
E G "CAN_INT_TX0" 3 95 "4" `628 
E G "CAN_INT_TX1" 3 95 "3" `629 
E G "CAN_INT_TX2" 3 95 "2" `630 
E G "CAN_INT_ERROR" 3 95 "1" `631 
E G "CAN_INT_NO" 3 95 "0" `632  "can status register READ-ONLY"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANSTAT" 3 103 "{int1 void0,int3 icode,int1 void4,int3 opmode}" `638 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "COMSTAT" 3 116 "{int1 ewarn,int1 rxwarn,int1 txwarn,int1 rxbp,int1 txbp,int1 txbo,int1 rx1ovfl,int1 rx0ovfl}" `648 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON1" 3 123 "{int6 brp,int2 sjw}" `652 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON2" 3 132 "{int3 prseg,int3 seg1ph,int1 sam,int1 seg2phts}" `658 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON3" 3 141 "{int3 seg2ph,int3 void543,int1 wakfil,int1 void7}" `664 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CIOCON" 3 151 "{int4 void3210,int1 cancap,int1 endrhi,int1 tx2en,int1 tx2src}" `671 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXB0CON" 3 164 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `680 
V G "TXB1CON" 3 165 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `681 
V G "TXB2CON" 3 166 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `682 
V G "TXBaCON" 3 167 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `683 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "RX0MASK" 3 190 "getenv("SFR:RXM0EIDL")" "0xF1B    //rxm0eidl"
D G "RX1MASK" 3 191 "getenv("SFR:RXM1EIDL")" "0xF1F    //rxm1eidl"
D G "RX0FILTER0" 3 192 "getenv("SFR:RXF0EIDL")" "0xF03    //rxf0eidl"
D G "RX0FILTER1" 3 193 "getenv("SFR:RXF1EIDL")" "0xF07    //rxf1eidl"
D G "RX1FILTER2" 3 194 "getenv("SFR:RXF2EIDL")" "0xF0B    //rxf2eidl"
D G "RX1FILTER3" 3 195 "getenv("SFR:RXF3EIDL")" "0xF0F    //rxf3eidl"
D G "RX1FILTER4" 3 196 "getenv("SFR:RXF4EIDL")" "0xF13    //rxf4eidl"
D G "RX1FILTER5" 3 197 "getenv("SFR:RXF5EIDL")" "0xF17    //rxf5eidl"
D G "RXB0ID" 3 198 "getenv("SFR:RXB0EIDL")" "0xF64    //rxb0eidl"
D G "RXB1ID" 3 199 "getenv("SFR:RXB1EIDL")" "0xF54    //rxb1eidl"
D G "TXB0ID" 3 200 "getenv("SFR:TXB0EIDL")" "0xF44    //txb0eidl"
D G "TXB1ID" 3 201 "getenv("SFR:TXB1EIDL")" "0xF34    //txb1eidl"
D G "TXB2ID" 3 202 "getenv("SFR:TXB2EIDL")" "0xF24    //tsb2eidl"
D G "TXRXBaID" 3 203 "0xF64"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXB0DLC" 3 220 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `707 
V G "TXB1DLC" 3 221 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `708 
V G "TXB2DLC" 3 222 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `709 
V G "TXBaDLC" 3 223 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `710 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
E G "CAN_RX_ALL" 3 234 "3" `713 
E G "CAN_RX_EXT" 3 234 "2" `714 
E G "CAN_RX_STD" 3 234 "1" `715 
E G "CAN_RX_VALID" 3 234 "0" `716  "receive buffer 0 control register"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB0CON" 3 245 "{int1 filthit0,int1 jtoff,int1 rxb0dben,int1 rxrtrro,int1 void4,int2 rxm,int1 rxful}" `725 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB1CON" 3 255 "{int3 filthit,int1 rxrtrro,int1 void4,int2 rxm,int1 rxful}" `732 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXRXBaSIDL" 3 278 "{int3 void012,int1 ext,int1 srr,int3 void567}" `747 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB0DLC" 3 289 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `754 
V G "RXB1DLC" 3 290 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `755 
V G "RXBaDLC" 3 291 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `756 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "CAN_MASK_ACCEPT_ALL" 3 345 "0"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
f G "can_init" 3 368 "void()" `809 
f G "can_set_baud" 3 369 "void()" `810 
V L "mode" 3 370 "CAN_OP_MODE" `812 
f G "can_set_mode" 3 370 "void(CAN_OP_MODE mode)" `811 
V L "addr" 3 371 "*int8" `814 
V L "id" 3 371 "int32" `815 
V L "ext" 3 371 "int8" `816 
f G "can_set_id" 3 371 "void(*int8 addr,int32 id,int8 ext)" `813 
V L "addr" 3 372 "*int8" `818 
V L "ext" 3 372 "int8" `819 
f G "can_get_id" 3 372 "int32(*int8 addr,int8 ext)" `817 
V L "id" 3 373 "int32" `821 
V L "data" 3 373 "*int8" `822 
V L "len" 3 373 "int8" `823 
V L "priority" 3 373 "int8" `824 
V L "ext" 3 373 "int8" `825 
V L "rtr" 3 373 "int8" `826 
f G "can_putd" 3 373 "int8(int32 id,*int8 data,int8 len,int8 priority,int8 ext,int8 rtr)" `820 
V L "id" 3 374 "int32" `828 
V L "data" 3 374 "*int8" `829 
V L "len" 3 374 "int8" `830 
V L "stat" 3 374 "{int1 err_ovfl,int3 filthit,int1 buffer,int1 rtr,int1 ext,int1 inv}" `831 
f G "can_getd" 3 374 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int3 filthit,int1 buffer,int1 rtr,int1 ext,int1 inv} stat)" `827 
D G "can_debug" 2 71 ""
D G "can_kbhit" 2 76 "()                 (RXB0CON.rxful || RXB1CON.rxful)"
D G "can_tbe" 2 77 "()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq)"
D G "can_abort" 2 78 "()                 (CANCON.abat=1)"
C L "can_getd" 2 75 11 "FUNCTION"
F G "can_init" 2 98 "void()" `809 
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_init" 2 75 1 "FUNCTION"
C L "can_set_baud" 2 75 6 "FUNCTION"
F G "can_set_baud" 2 153 "void()" `810 
V L "mode" 2 166 "CAN_OP_MODE" `853 
F G "can_set_mode" 2 166 "void(CAN_OP_MODE mode)" `811 
C L "can_set_id" 2 75 8 "FUNCTION"
V L "addr" 2 186 "*int8" `814 
V L "id" 2 186 "int32" `815 
V L "ext" 2 186 "int8" `855 
F G "can_set_id" 2 186 "void(*int8 addr,int32 id,int8 ext)" `813 
V L "ptr" 2 187 "*int8" `852 
C L "can_set_id" 2 75 2 "FUNCTION"
C L "can_set_id" 2 75 2 "FUNCTION"
C L "can_set_id" 2 75 2 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 2 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_set_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 9 "FUNCTION"
V L "addr" 2 246 "*int8" `818 
V L "ext" 2 246 "int8" `855 
F G "can_get_id" 2 246 "int32(*int8 addr,int8 ext)" `817 
V L "ret" 2 247 "int32" `853 
V L "ptr" 2 248 "*int8" `854 
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_get_id" 2 75 1 "FUNCTION"
C L "can_putd" 2 75 15 "FUNCTION"
V L "id" 2 300 "int32" `821 
V L "data" 2 300 "*int8" `822 
V L "len" 2 300 "int8" `823 
V L "priority" 2 300 "int8" `824 
V L "ext" 2 300 "int8" `825 
V L "rtr" 2 300 "int8" `861 
F G "can_putd" 2 300 "int8(int32 id,*int8 data,int8 len,int8 priority,int8 ext,int8 rtr)" `820 
V L "i" 2 301 "int8" `855 
V L "txd0" 2 302 "*int8" `856 
V L "port" 2 303 "int8" `857 
C L "can_putd" 2 75 2 "FUNCTION"
C L "can_putd" 2 75 1 "FUNCTION"
C L "can_putd" 2 75 1 "FUNCTION"
C L "can_putd" 2 75 1 "FUNCTION"
C L "can_putd" 2 75 1 "FUNCTION"
C L "can_getd" 2 75 11 "FUNCTION"
V L "id" 2 383 "int32" `828 
V L "data" 2 383 "*int8" `829 
V L "len" 2 383 "int8" `830 
V L "stat" 2 383 "{int1 err_ovfl,int3 filthit,int1 buffer,int1 rtr,int1 ext,int1 inv}" `862 
F G "can_getd" 2 384 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int3 filthit,int1 buffer,int1 rtr,int1 ext,int1 inv} stat)" `827 
V L "i" 2 385 "int8" `858 
V L "ptr" 2 386 "*int8" `859 
C L "can_getd" 2 75 1 "FUNCTION"
D G "BME280_ADDRESS" 4 26 "0xEE" "I2C address of BME280 VDD"
D G "A_SHRT" 4 27 "(var2,y) (var2>0)?(var2>>y):(-((-var2)>>y))"
D G "A_SHLT" 4 28 "(x,y) (x>0)?(x<<y):(-((-x)<<y))"
V G "dig_T1" 4 34 "int16" `864 
V G "dig_T2" 4 35 "sint16" `865 
V G "dig_T3" 4 36 "sint16" `866 
V G "dig_P1" 4 37 "int16" `867  "= 37621;"
V G "dig_P2" 4 38 "sint16" `868 
V G "dig_P3" 4 39 "sint16" `869 
V G "dig_P4" 4 40 "sint16" `870 
V G "dig_P5" 4 41 "sint16" `871 
V G "dig_P6" 4 42 "sint16" `872 
V G "dig_P7" 4 43 "sint16" `873 
V G "dig_P8" 4 44 "sint16" `874 
V G "dig_P9" 4 45 "sint16" `875 
V G "dig_H1" 4 46 "int8" `876 
V G "dig_H2" 4 47 "sint16" `877 
V G "dig_H3" 4 48 "int8" `878 
V G "dig_H4" 4 49 "int16" `879 
V G "dig_H5" 4 50 "sint16" `880 
V G "dig_H6" 4 51 "sint8" `881 
V G "t_fine" 4 52 "sint32" `882  "var1, var2;"
V G "adc_P" 4 54 "int32" `883 
V G "adc_T" 4 54 "int32" `884 
V G "adc_H" 4 55 "int16" `885 
V G "data" 4 56 "int8[8]" `886 
V L "address" 4 57 "int8" `888 
f G "BME280ReadByte" 4 57 "int8(int8 address)" `887 
V L "address" 4 58 "int8" `890 
f G "BME280ReadInt" 4 58 "int16(int8 address)" `889 
V L "data" 4 59 "int8" `892 
f G "BME280Read24" 4 59 "int32(int8 data)" `891 
V L "address" 4 60 "int8" `894 
V L "data" 4 60 "int8" `895 
f G "BME280WriteByte" 4 60 "void(int8 address,int8 data)" `893 
f G "BME280ReadingCalibration" 4 61 "int8()" `896 
f G "BME280Calibration" 4 62 "void()" `897 
f G "BME280SetSampling" 4 63 "void()" `898 
F G "init_BME280" 4 66 "void()" `899 
F G "BME280Begin" 4 71 "int8()" `900  "check if sensor, i.e. the chip ID is correct"
C L "BME280Begin" 4 2 2 "FUNCTION"
C L "BME280Begin" 4 2 1 "FUNCTION"
C L "BME280Begin" 4 2 1 "FUNCTION"
C L "BME280Begin" 4 2 1 "FUNCTION"
C L "BME280Begin" 4 2 1 "FUNCTION"
F G "BME280SetSampling" 4 94 "void()" `898 
C L "BME280SetSampling" 4 2 1 "FUNCTION"
C L "BME280SetSampling" 4 2 1 "FUNCTION"
C L "BME280SetSampling" 4 2 6 "FUNCTION"
F G "BME280ReadID" 4 108 "int8()" `901 
V L "data" 4 109 "int8" `902 
C L "BME280ReadID" 4 2 1 "FUNCTION"
V L "address" 4 122 "int8" `888  ""
F G "BME280ReadByte" 4 124 "int8(int8 address)" `887 
V L "data" 4 125 "int8" `903 
V L "address" 4 140 "int8" `905  ""
F G "BME280Read16" 4 142 "int16(int8 address)" `904 
V L "msb" 4 143 "int8" `906 
V L "lsb" 4 143 "int8" `907 
V L "temp" 4 144 "int16" `908 
C L "BME280Read16" 4 2 1 "FUNCTION"
C L "BME280ReadS16" 4 2 1 "FUNCTION"
V L "address" 4 163 "int8" `913 
F G "BME280ReadS16" 4 164 "int16(int8 address)" `912 
V L "address" 4 168 "int8" `915 
F G "BME280Read16_LE" 4 169 "int16(int8 address)" `914 
V L "temp" 4 170 "int16" `916 
V L "address" 4 175 "int8" `918 
F G "BME280ReadS16_LE" 4 176 "sint16(int8 address)" `917 
V L "address" 4 181 "int8" `894 
V L "data" 4 181 "int8" `895  ""
F G "BME280WriteByte" 4 183 "void(int8 address,int8 data)" `893 
F G "BME280ReadDig_H4" 4 192 "sint16(int8 address,int8 data)" `919 
V L "temp" 4 193 "int16" `920 
V L "msb" 4 194 "int8" `921 
V L "lsb" 4 194 "int8" `922 
F G "BME280Calibration" 4 203 "void()" `897 
C L "BME280Calibration" 4 2 1 "FUNCTION"
C L "BurstRead" 4 2 1 "FUNCTION"
F G "BurstRead" 4 233 "void()" `923  "int8 data[8];"
C L "BurstRead" 4 2 1 "FUNCTION"
C L "BurstRead" 4 2 1 "FUNCTION"
C L "BurstRead" 4 2 1 "FUNCTION"
V L "data" 4 259 "int8" `925 
F G "BME280Read24" 4 260 "int32(int8 data)" `891 
V L "value" 4 261 "int32" `924 
V L "msb" 4 262 "int8" `925 
V L "lsb" 4 262 "int8" `926 
V L "xlsb" 4 262 "int8" `927 
C L "BME280Read24" 4 2 1 "FUNCTION"
C L "BME280Read24" 4 2 1 "FUNCTION"
C L "BME280Read24" 4 276 1 "*"
C L "BME280Read24" 4 276 1 "FUNCTION"
F G "BME280ReadingCalibration" 4 285 "int8()" `896  "unsigned int8 const rStatus = BME280ReadByte(0xF3);"
V L "rStatus" 4 287 "int8" `928 
C L "BME280ReadingCalibration" 4 276 1 "FUNCTION"
F G "BME280TakeForcedMeasurement" 4 292 "void()" `929 
C L "BME280TakeForcedMeasurement" 4 276 1 "FUNCTION"
C L "BME280TakeForcedMeasurement" 4 276 1 "FUNCTION"
F G "BME280ReadTemperature" 4 301 "float()" `930 
V L "var1" 4 304 "sint32" `931 
V L "var2" 4 304 "sint32" `932  "signed int32 adc_T = BME280Read24(0xFA); //FA THE TEMPERATURE REGISTER"
C L "BME280ReadTemperature" 4 276 1 "FUNCTION"
V L "T" 4 317 "float" `936 
F G "BME280_compensate_P_int32" 4 323 "int32()" `942  "signed int32 adc_P = BME280Read24(0xF7); //FA THE TEMPERATURE REGISTER"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
V L "var1" 4 329 "sint32" `943 
V L "var2" 4 329 "sint32" `944 
V L "var3" 4 329 "sint32" `945 
V L "p" 4 330 "int32" `946  "BME280ReadTemperature(); //must be done to get t_fine"
C L "BME280_compensate_P_int32" 4 276 2 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 2 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
C L "BME280_compensate_P_int32" 4 276 1 "FUNCTION"
F G "Calculate_Pess" 4 377 "float()" `950 
V L "var1" 4 378 "float" `951 
V L "var2" 4 378 "float" `952 
V L "p" 4 378 "float" `953 
C L "Calculate_Pess" 4 276 1 "FUNCTION"
C L "Calculate_Pess" 4 276 1 "FUNCTION"
F G "BME280ReadHumidity" 4 402 "float()" `969  "readTemperature(); // must be done first to get"
V L "adc_H" 4 406 "int32" `970 
C L "BME280ReadHumidity" 4 276 1 "FUNCTION"
C L "BME280ReadHumidity" 4 276 1 "FUNCTION"
V L "v_x1_u32r" 4 410 "sint32" `971 
V L "h" 4 423 "float" `972 
D G "_STDLIB" 5 12 ""
D G "RAND_MAX" 5 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 5 25 "1"
T G "div_t" 5 33 "{sint8 quot,sint8 rem}" `976 
T G "ldiv_t" 5 38 "{sint16 quot,sint16 rem}" `980  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 5 43 2 "FUNCTION"
C L "atoi" 5 46 1 "*"
C L "atoi" 5 46 1 "*"
V L "s" 5 50 "*int8" `982 
f G "atoi" 5 50 "sint8(*int8 s)" `981  "Syntax: signed int32  atoi32(char * s)"
V L "s" 5 58 "*int8" `984 
f G "atoi32" 5 58 "sint32(*int8 s)" `983  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 5 46 2 "FUNCTION"
V L "num" 5 79 "sint32" `986 
V L "base" 5 79 "int8" `987 
V L "s" 5 79 "*int8" `988 
f G "itoa" 5 79 "*int8(sint32 num,int8 base,*int8 s)" `985  "Standard template: signed int16  atol(char * s)"
C L "itoa" 5 81 1 "*"
C L "itoa" 5 81 1 "*"
V L "s" 5 85 "*int8" `990 
f G "atol" 5 85 "sint16(*int8 s)" `989  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
V L "s" 5 93 "*int8" `992 
V L "endptr" 5 93 "*int8" `993 
V L "base" 5 93 "sint8" `994 
f G "strtol" 5 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `991  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
V L "s" 5 101 "*int8" `996 
V L "endptr" 5 101 "*int8" `997 
V L "base" 5 101 "sint8" `998 
f G "strtoul" 5 101 "int16(*int8 s,*int8 endptr,sint8 base)" `995  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 5 95 2 "FUNCTION"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
V L "s" 5 110 "*int8" `1000 
V L "endptr" 5 110 "*int8" `1001 
f G "strtof" 5 110 "float(*int8 s,*int8 endptr)" `999  "provided for compatibility"
D G "strtof48" 5 116 "(s,e) strtof(s, e)"
D G "strtod" 5 117 "(s,e) strtof(s, e)"
C L "strtof" 5 103 1 "FUNCTION"
C L "strtof" 5 120 1 "*"
D G "atof" 5 124 "(s)   strtof(s, 0)"
C L "strtof" 5 120 1 "FUNCTION"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
V L "s" 5 149 "*int8" `1003 
f G "atoe" 5 149 "float(*int8 s)" `1002  "Pseudo-random sequence generation functions"
C L "atoe" 5 143 1 "FUNCTION"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
f G "rand" 5 169 "int16()" `1004  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
V L "seed" 5 191 "int32" `1006 
f G "srand" 5 191 "void(int32 seed)" `1005  "Memory management functions"
C L "srand" 5 171 3 "FUNCTION"
V L "string" 5 205 "*int8" `1008 
f G "system" 5 205 "sint8(*int8 string)" `1007  "Searching and sorting utilities"
C L "system" 5 171 1 "FUNCTION"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 4 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
D G "labs" 5 249 "abs"
V L "numer" 5 251 "sint8" `1010 
V L "denom" 5 251 "sint8" `1011 
f G "div" 5 251 "div_t(sint8 numer,sint8 denom)" `1009 
V L "numer" 5 252 "sint16" `1013 
V L "denom" 5 252 "sint16" `1014 
f G "ldiv" 5 252 "ldiv_t(sint16 numer,sint16 denom)" `1012  "Multibyte character functions"
C L "ldiv" 5 229 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
D G "_STRING" 7 12 ""
C L "ldiv" 6 2 7 "FUNCTION"
D G "_CTYPE" 8 12 ""
D G "islower" 8 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 8 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 8 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 8 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 8 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 8 19 "(x)  ((x)==' ')"
D G "isxdigit" 8 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 8 21 "(x)  ((x)<' ')"
D G "isprint" 8 22 "(x)  ((x)>=' ')"
D G "isgraph" 8 23 "(x)  ((x)>' ')"
D G "ispunct" 8 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 7 19 10 "FUNCTION"
V L "s1" 7 34 "*int8" `1016 
V L "s2" 7 34 "*int8" `1017 
V L "n" 7 34 "int16" `1018 
F G "memmove" 7 35 "*int8(*int8 s1,*int8 s2,int16 n)" `1015 
V L "sc1" 7 36 "*int8" `1019 
V L "sc2" 7 37 "*int8" `1020 
D G "strcopy" 7 54 "strcpy"
V L "s1" 7 61 "*int8" `1022 
V L "s2" 7 61 "*int8" `1023 
V L "n" 7 61 "int16" `1024 
F G "strncpy" 7 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1021 
V L "s" 7 63 "*int8" `1025 
V L "s1" 7 78 "*int8" `1027 
V L "s2" 7 78 "*int8" `1028 
F G "strcat" 7 79 "*int8(*int8 s1,*int8 s2)" `1026 
V L "s" 7 80 "*int8" `1029 
V L "s1" 7 96 "*int8" `1031 
V L "s2" 7 96 "*int8" `1032 
V L "n" 7 96 "int16" `1033 
F G "strncat" 7 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1030 
V L "s" 7 98 "*int8" `1034 
C L "memcmp" 7 19 3 "FUNCTION"
V L "s1" 7 120 "*int8" `1036 
V L "s2" 7 120 "*int8" `1037 
V L "n" 7 120 "int16" `1038 
F G "memcmp" 7 121 "sint8(*int8 s1,*int8 s2,int16 n)" `1035 
V L "su1" 7 122 "*int8" `1039 
V L "su2" 7 122 "*int8" `1040 
C L "strcmp" 7 19 2 "FUNCTION"
V L "s1" 7 134 "*int8" `1042 
V L "s2" 7 134 "*int8" `1043 
F G "strcmp" 7 135 "sint8(*int8 s1,*int8 s2)" `1041 
C L "strcoll" 7 19 2 "FUNCTION"
V L "s1" 7 144 "*int8" `1045 
V L "s2" 7 144 "*int8" `1046 
F G "strcoll" 7 145 "sint8(*int8 s1,*int8 s2)" `1044 
C L "strncmp" 7 19 4 "FUNCTION"
V L "s1" 7 157 "*int8" `1048 
V L "s2" 7 157 "*int8" `1049 
V L "n" 7 157 "int16" `1050 
F G "strncmp" 7 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1047 
C L "strxfrm" 7 19 3 "FUNCTION"
V L "s1" 7 169 "*int8" `1052 
V L "s2" 7 169 "*int8" `1053 
V L "n" 7 169 "int16" `1054 
F G "strxfrm" 7 170 "int16(*int8 s1,*int8 s2,int16 n)" `1051 
V L "s" 7 171 "*int8" `1055 
V L "n1" 7 172 "int8" `1056 
V L "s" 7 191 "*int8" `1058 
V L "c" 7 191 "int8" `1059 
V L "n" 7 191 "int16" `1060 
F G "memchr" 7 192 "*int8(*int8 s,int8 c,int16 n)" `1057 
V L "uc" 7 193 "int8" `1061 
V L "su" 7 194 "*int8" `1062 
V L "s" 7 205 "*int8" `1064 
V L "c" 7 205 "int8" `1065 
F G "strchr" 7 206 "*int8(*int8 s,int8 c)" `1063 
C L "strcspn" 7 19 4 "FUNCTION"
V L "s1" 7 217 "*int8" `1067 
V L "s2" 7 217 "*int8" `1068 
F G "strcspn" 7 218 "int8(*int8 s1,*int8 s2)" `1066 
V L "sc1" 7 219 "*int8" `1069 
V L "sc2" 7 219 "*int8" `1070 
V L "s1" 7 232 "*int8" `1072 
V L "s2" 7 232 "*int8" `1073 
F G "strpbrk" 7 233 "*int8(*int8 s1,*int8 s2)" `1071 
V L "sc1" 7 234 "*int8" `1074 
V L "sc2" 7 234 "*int8" `1075 
V L "s" 7 247 "*int8" `1077 
V L "c" 7 247 "int8" `1078 
F G "strrchr" 7 248 "*int8(*int8 s,int8 c)" `1076 
V L "p" 7 249 "*int8" `1079 
C L "strspn" 7 19 2 "FUNCTION"
V L "s1" 7 262 "*int8" `1081 
V L "s2" 7 262 "*int8" `1082 
F G "strspn" 7 263 "int8(*int8 s1,*int8 s2)" `1080 
V L "sc1" 7 264 "*int8" `1083 
V L "sc2" 7 264 "*int8" `1084 
V L "s1" 7 281 "*int8" `1086 
V L "s2" 7 281 "*int8" `1087 
F G "strstr" 7 282 "*int8(*int8 s1,*int8 s2)" `1085 
V L "s" 7 283 "*int8" `1088 
V L "T" 7 283 "*int8" `1089 
V L "s1" 7 320 "*int8" `1091 
V L "s2" 7 320 "*int8" `1092 
F G "strtok" 7 321 "*int8(*int8 s1,*int8 s2)" `1090 
V L "beg" 7 322 "*int8" `1093 
V L "end" 7 322 "*int8" `1094 
V L "save" 7 323 "*int8" `1095 
C L "strlen" 7 19 6 "FUNCTION"
V L "s" 7 369 "*int8" `1097 
F G "strlen" 7 370 "int8(*int8 s)" `1096 
V L "sc" 7 371 "*int8" `1098 
C L "stricmp" 7 19 2 "FUNCTION"
V L "s1" 7 380 "*int8" `1100 
V L "s2" 7 380 "*int8" `1101 
F G "stricmp" 7 381 "sint8(*int8 s1,*int8 s2)" `1099 
V L "s" 7 394 "*int8" `1105 
F G "strlwr" 7 395 "*int8(*int8 s)" `1104 
V L "p" 7 396 "*int8" `1106 
V L "s" 7 408 "*int8" `1108 
F G "strupr" 7 409 "*int8(*int8 s)" `1107 
V L "p" 7 410 "*int8" `1109 
V L "numer" 5 274 "sint8" `1010 
V L "denom" 5 274 "sint8" `1112 
F G "div" 5 275 "div_t(sint8 numer,sint8 denom)" `1009 
V L "val" 5 276 "div_t" `1110 
V L "numer" 5 282 "sint16" `1013 
V L "denom" 5 282 "sint16" `1119 
F G "ldiv" 5 283 "ldiv_t(sint16 numer,sint16 denom)" `1012 
V L "val" 5 284 "ldiv_t" `1117 
V L "s" 5 361 "*int8" `1125 
F G "atoe" 5 362 "float(*int8 s)" `1002 
V L "pow10" 5 363 "float" `1124 
V L "result" 5 364 "float" `1125 
V L "sign" 5 365 "int8" `1126 
V L "expsign" 5 366 "int8" `1127 
V L "c" 5 367 "int8" `1128 
V L "ptr" 5 368 "int8" `1129 
V L "i" 5 369 "int8" `1130 
V L "exp" 5 370 "float" `1131 
V L "expcnt" 5 371 "int8" `1132 
C L "atoe" 5 397 1 "FUNCTION"
V L "s" 5 429 "*int8" `1134 
F G "atoi" 5 430 "sint8(*int8 s)" `981 
V L "result" 5 431 "sint8" `1133 
V L "sign" 5 432 "int8" `1134 
V L "base" 5 432 "int8" `1135 
V L "index" 5 432 "int8" `1136 
V L "c" 5 433 "int8" `1137 
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
V L "s" 5 498 "*int8" `1139 
F G "atol" 5 499 "sint16(*int8 s)" `989 
V L "result" 5 500 "sint16" `1138 
V L "sign" 5 501 "int8" `1139 
V L "base" 5 501 "int8" `1140 
V L "index" 5 501 "int8" `1141 
V L "c" 5 502 "int8" `1142 
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "mult_with10" 5 397 1 "FUNCTION"
V L "num" 5 565 "int32" `1144 
F G "mult_with10" 5 566 "sint32(int32 num)" `1143 
V L "s" 5 571 "*int8" `1146 
F G "atoi32" 5 572 "sint32(*int8 s)" `983 
V L "result" 5 573 "sint32" `1145 
V L "sign" 5 574 "int8" `1146 
V L "base" 5 574 "int8" `1147 
V L "index" 5 574 "int8" `1148 
V L "c" 5 575 "int8" `1149 
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
V L "num" 5 770 "sint32" `986 
V L "base" 5 770 "int8" `987 
V L "s" 5 770 "*int8" `1153 
F G "itoa" 5 771 "*int8(sint32 num,int8 base,*int8 s)" `985 
V L "temp" 5 772 "int32" `1150 
V L "i" 5 773 "int8" `1151 
V L "sign" 5 773 "int8" `1152 
V L "cnt" 5 773 "int8" `1153 
V L "c" 5 774 "int8" `1154 
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
V L "s" 5 885 "*int8" `1000 
V L "endptr" 5 885 "*int8" `1160 
F G "strtof" 5 886 "float(*int8 s,*int8 endptr)" `999 
V L "pow10" 5 887 "float" `1158 
V L "result" 5 888 "float" `1159 
V L "skip" 5 889 "int1" `1160 
V L "sign" 5 889 "int1" `1161 
V L "point" 5 889 "int1" `1162 
V L "c" 5 890 "int8" `1163 
V L "ptr" 5 891 "int8" `1164 
V L "s" 5 1103 "*int8" `996 
V L "endptr" 5 1103 "*int8" `997 
V L "base" 5 1103 "sint8" `1169 
F G "strtoul" 5 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `995 
V L "sc" 5 1105 "*int8" `1166 
V L "s1" 5 1105 "*int8" `1167 
V L "sd" 5 1105 "*int8" `1168 
V L "x" 5 1106 "int16" `1169 
V L "sign" 5 1107 "int8" `1170 
V L "digits" 5 1108 "int8[1]" `1171 
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
V L "s" 5 1165 "*int8" `992 
V L "endptr" 5 1165 "*int8" `993 
V L "base" 5 1165 "sint8" `1176 
F G "strtol" 5 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `991 
V L "sc" 5 1167 "*int8" `1173 
V L "s1" 5 1167 "*int8" `1174 
V L "sd" 5 1167 "*int8" `1175 
V L "x" 5 1168 "sint16" `1176 
V L "sign" 5 1169 "int8" `1177 
V L "digits" 5 1170 "int8[1]" `1178 
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
V L "string" 5 1228 "*int8" `1181 
F G "system" 5 1229 "sint8(*int8 string)" `1007 
V L "s" 5 1233 "*int8" `1181 
V L "n" 5 1233 "int16" `1182 
F G "mblen" 5 1234 "int8(*int8 s,int16 n)" `1180 
V L "pwc" 5 1238 "*int8" `1184 
V L "s" 5 1238 "*int8" `1185 
V L "n" 5 1238 "int16" `1186 
F G "mbtowc" 5 1239 "int8(*int8 pwc,*int8 s,int16 n)" `1183 
V L "s" 5 1244 "*int8" `1188 
V L "wchar" 5 1244 "int8" `1189 
F G "wctomb" 5 1245 "int8(*int8 s,int8 wchar)" `1187 
V L "pwcs" 5 1250 "*int8" `1191 
V L "s" 5 1250 "*int8" `1192 
V L "n" 5 1250 "int16" `1193 
F G "mbstowcs" 5 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `1190 
V L "s" 5 1256 "*int8" `1195 
V L "pwcs" 5 1256 "*int8" `1196 
V L "n" 5 1256 "int16" `1197 
F G "wcstombs" 5 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `1194 
V G "_Randseed" 5 1266 "int32" `1198 
F G "rand" 5 1269 "int16()" `1004 
V L "seed" 5 1274 "int32" `1203 
F G "srand" 5 1275 "void(int32 seed)" `1005 
V L "p1" 5 1284 "*int8" `1203 
V L "p2" 5 1284 "*int8" `1204 
T G "*_Cmpfun" 5 1284 "sint8(*int8 p1,*int8 p2)" `1202 
V L "qdata" 5 1291 "*int8" `1207 
V L "qitems" 5 1291 "int8" `1208 
V L "qsize" 5 1291 "int8" `1209 
V L "cmp" 5 1291 "_Cmpfun" `1210 
F G "qsort" 5 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1206 
V L "m" 5 1292 "int8" `1211 
V L "j" 5 1292 "int8" `1212 
V L "i" 5 1292 "int8" `1213 
V L "l" 5 1292 "int8" `1214 
V L "done" 5 1293 "int1" `1215 
V L "T" 5 1294 "int8[16]" `1216 
V L "key" 5 1319 "*int8" `1219 
V L "base" 5 1319 "*int8" `1220 
V L "num" 5 1319 "int16" `1221 
V L "width" 5 1319 "int16" `1222 
V L "cmp" 5 1319 "_Cmpfun" `1223 
F G "bsearch" 5 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1218 
V L "p" 5 1321 "*int8" `1224 
V L "q" 5 1321 "*int8" `1225 
V L "n" 5 1322 "int16" `1226 
V L "pivot" 5 1323 "int16" `1227 
V L "val" 5 1324 "sint8" `1228 
C L "bsearch" 5 397 1 "FUNCTION"
V G "ms" 0 54 "int16" `1229 
F G "isr_timer2" 0 57 "void()" `1230 
C L "isr_timer2" 0 53 1 "FUNCTION"
F G "MAIN" 0 61 "void()" `1231  "setup_spi(SPI_MASTER | SPI_MODE_1 | SPI_CLK_DIV_64, );"
V L "rxstat" 0 63 "{int1 err_ovfl,int3 filthit,int1 buffer,int1 rtr,int1 ext,int1 inv}" `1232 
V L "rx_id" 0 64 "int32" `1233 
V L "in_data" 0 65 "int8[8]" `1234 
V L "rx_len" 0 66 "int8" `1235  "send a request (tx_rtr=1) for 8 bytes of data (tx_len=8) from id 24 (tx_id=24)"
V L "out_data" 0 69 "int8[8]" `1236 
V L "out_data_hu" 0 70 "int8[8]" `1237 
V L "tx_id" 0 71 "int32" `1238 
C L "MAIN" 0 53 1 "FUNCTION"
V L "tx_idh" 0 72 "int32" `1239 
C L "MAIN" 0 53 1 "FUNCTION"
V L "tx_rtr" 0 74 "int1" `1240 
C L "MAIN" 0 53 1 "FUNCTION"
V L "tx_ext" 0 75 "int1" `1241 
C L "MAIN" 0 53 1 "FUNCTION"
V L "tx_len" 0 76 "int8" `1242 
V L "tx_pri" 0 77 "int8" `1243 
V L "i" 0 79 "int8" `1244 
V L "j" 0 80 "int8" `1245 
V L "tempp" 0 94 "{float f,int8[4] b}" `1251 
V L "pressp" 0 94 "{float f,int8[4] b}" `1252 
V L "hup" 0 94 "{float f,int8[4] b}" `1253  "p is alias pointer"
C L "MAIN" 0 53 3 "FUNCTION"
V L "temp" 0 117 "float" `1254 
V L "press" 0 117 "float" `1255 
V L "hu" 0 117 "float" `1256 
V L "thermo" 0 117 "float" `1257 
V L "thermo1" 0 117 "float" `1258 
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 4 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
C L "MAIN" 0 53 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
